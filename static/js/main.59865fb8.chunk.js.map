{"version":3,"sources":["components/styles.ts","components/SvgTranslator.tsx","game/board.ts","utils/queue.ts","game/index.ts","components/Stone.tsx","redux/tool.ts","eventEmitter.ts","components/Board.tsx","utils/svg.ts","redux/actions.ts","components/BottomPane.tsx","components/Scoreboard.tsx","components/ZoomPane.tsx","components/App.tsx","redux/reducers/board.ts","redux/reducers/game.ts","redux/reducers/index.ts","utils/devtools.ts","index.tsx","redux/store.ts"],"names":["Styles","board","backgoundColor","borderColor","whiteStoneColor","blackStoneColor","hintColor","cellSize","stoneRadius","hintSize","SVGTranslator","Stone","props","x","y","p","undefined","transform","children","Queue","_head","_tail","_length","this","value","newNode","data","next","ReferenceError","headData","length","dx","dy","Board","cells","_whiteCount","_blackCount","Array","initialize","pointToIndex","Empty","cell","at","White","Black","callbackfn","thisArg","forEach","stone","index","indexToPoint","bind","visited","Set","add","queue","enqueue","empty","point","dequeue","i","nextIndex","has","set","n","Math","abs","m","floor","TurnOver","isTurnedOver","turnOverStep","random","reset","turn","boundingRect","left","top","right","bottom","enumerateMarkedCells","putStone","result","temp","j","x1","y1","push","turnOver","change","min","max","updateBoundingRect","blackCount","whiteCount","markedCells","changeTurn","getFilledCells","filledCells","forEachFilledCell","getMarkedCells","getWhiteCount","getBlackCount","getTurn","getBoundingRect","forEachAdjacentEmptyCell","inOneDirection","canPutStone","Tool","styles","createStyles","turnOut","animationFillMode","animation","turnIn","prev","classes","animate","cx","cy","style","animationDelay","className","classNames","r","fill","game","React","withStyles","eventEmitter","EventEmitter","boardContainer","width","height","display","position","grabCursor","cursor","grabbingCursor","scaleStep","resizeObserver","boardContainerRef","gRef","svgRef","scaleIndex","canTouch","grabbingPointerId","pointerDownX","pointerDownY","prevScrollX","prevScrollY","ResizeObserver","entries","resize","contentRect","onWheelOnContainer","onClick","onTouchStartOnWindow","onTouchMoveOnWindow","onPointerDownOnContainer","onPointerMoveOnWindow","onPointerUpOrCancelOnWindow","state","scrollX","scrollY","scale","isGrabbing","current","observe","on","scaleUp","scaleDown","setState","prevState","scrollTo","minX","getActualCellSize","maxX","minY","maxY","hMargin","vMargin","clamp","centerX","centerY","setScale","e","tool","element","svg","createSVGPoint","matrixTransform","getScreenCTM","inverse","screenToRelative","clientX","clientY","pixelToCellIndex","dispatchPutStone","deltaY","touches","screenX","screenY","Pan","button","pointerId","ref","onPointerDown","onWheel","target","onTouchStart","onTouchMove","onPointerMove","onPointerUp","onPointerLeave","onPointerCancel","xmlns","renderBackground","renderBorders","renderStones","renderHints","borders","x0","y0","w","h","key","x2","y2","stroke","strokeWidth","map","getActualHintSize","connect","dispatch","type","useStyles","makeStyles","theme","container","toggleButtonGroup","background","palette","paper","BottomPane","useDispatch","setTool","Box","mb","ToggleButtonGroup","size","exclusive","onChange","newTool","ToggleButton","aria-label","SvgIcon","fontSize","d","fillRule","card","arrowIconContainerSettled","arrowIcon","transition","transitions","duration","shorter","easing","easeOut","arrowIconDown","marginTop","list","listItemText","userSelect","Scoreboard","useSelector","mt","mr","Card","ml","color","List","ListItem","ListItemIcon","ListItemText","primary","buttonGroup","padding","text","secondary","ZoomPane","ButtonGroup","orientation","Button","emit","App","Fragment","initialState","boardReducer","action","allReducersMapObject","pointAction","updatedCells","newCellsSet","filter","allReducers","combineReducers","console","log","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","createMuiTheme","blue","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"qUAaeA,EAbA,CACbC,MAAO,CACLC,eAAgB,mBAChBC,YAAa,wBACbC,gBAAiB,qBACjBC,gBAAiB,kBACjBC,UAAW,2BACXC,SAAU,GACVC,YAAa,GACbC,SAAU,K,gBCWCC,ICfVC,IDeUD,EAZf,SAAwBE,GAAyC,IAAD,IACxDC,EAAC,UAAGD,EAAMC,SAAT,QAAc,EACfC,EAAC,UAAGF,EAAME,SAAT,QAAc,EACfC,EAAC,2BAAQH,GAAR,IAAeC,OAAGG,EAAWF,OAAGE,IAEvC,OACE,qCAAGC,UAAS,6BAAwBJ,EAAxB,aAA8BC,EAA9B,MAAwCC,GACjDH,EAAMM,WEVQC,E,WAKnB,aAAgB,yBAJRC,WAIO,OAHPC,WAGO,OAFPC,aAEO,EACbC,KAAKH,WAAQJ,EACbO,KAAKF,WAAQL,EACbO,KAAKD,QAAU,E,oDAORE,GACP,IAAMC,EAAmB,CACvBC,KAAMF,EACNG,UAAMX,QAGWA,IAAfO,KAAKF,OACPE,KAAKH,MAAQK,EACbF,KAAKF,MAAQI,IAEbF,KAAKF,MAAMM,KAAOF,EAClBF,KAAKF,MAAQI,GAGfF,KAAKD,Y,gCAIL,QAAmBN,IAAfO,KAAKH,MACP,MAAM,IAAIQ,eAGZ,IAAMC,EAAWN,KAAKH,MAAMM,KAS5B,OARAH,KAAKH,MAAQG,KAAKH,MAAMO,UAELX,IAAfO,KAAKH,QACPG,KAAKF,WAAQL,GAGfO,KAAKD,UAEEO,I,8BAIP,OAAuB,IAAhBN,KAAKO,S,6BAtCZ,OAAOP,KAAKD,Y,KDfVS,EAAK,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GAC9BC,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAE/BrB,Q,KAAAA,E,iBAAAA,I,iBAAAA,I,iBASE,IETKA,EFSCsB,EAAb,WAYE,aAAgB,yBALRC,WAKO,OAHPC,iBAGO,OAFPC,iBAEO,EACbb,KAAKW,MAAQ,IAAIG,MAAM,IACvBd,KAAKY,YAAc,EACnBZ,KAAKa,YAAc,EACnBb,KAAKe,aAhBT,oDAoBIf,KAAKW,MAAQ,IAAIG,MAAM,IACvBd,KAAKY,YAAc,EACnBZ,KAAKa,YAAc,EACnBb,KAAKe,eAvBT,yBA0BMzB,EAAWC,GAAmB,IAAD,EAC/B,iBAAOS,KAAKW,MAAMX,KAAKgB,aAAa1B,EAAGC,WAAvC,QAA8CH,EAAM6B,QA3BxD,0BA8BO3B,EAAWC,EAAW2B,GACzB,OAAQlB,KAAKmB,GAAG7B,EAAGC,IACjB,KAAKH,EAAMgC,MACTpB,KAAKY,cACL,MACF,KAAKxB,EAAMiC,MACTrB,KAAKa,cAMT,OAAQK,GACN,KAAK9B,EAAMgC,MACTpB,KAAKY,cACL,MACF,KAAKxB,EAAMiC,MACTrB,KAAKa,cAMTb,KAAKW,MAAMX,KAAKgB,aAAa1B,EAAGC,IAAM2B,IArD1C,wCAwDqBI,EAAkDC,GAA0B,IAAD,OAC5FvB,KAAKW,MAAMa,SAAQ,SAACC,EAAOC,GACzBJ,EAAW,EAAKK,aAAaD,GAAQD,KACpCF,KA3DP,+CA8D4BD,EAAoCC,QAC5C9B,IAAZ8B,IACFD,EAAaA,EAAWM,KAAKL,IAG/B,IAAMM,EAAU,IAAIC,IACpBD,EAAQE,IAAI/B,KAAKgB,aAAa,EAAG,IACjC,IAAMgB,EAAQ,IAAIpC,EAGlB,IAFAoC,EAAMC,QAAQ,CAAE3C,EAAG,EAAGC,EAAG,KAEjByC,EAAME,SAGZ,IAFA,IAAMC,EAAQH,EAAMI,UAEXC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMjC,EAAc,CAAEd,EAAG6C,EAAM7C,EAAIkB,EAAG6B,GAAI9C,EAAG4C,EAAM5C,EAAIkB,EAAG4B,IACpDC,EAAYtC,KAAKgB,aAAaZ,EAAKd,EAAGc,EAAKb,GAC7CsC,EAAQU,IAAID,KAChBT,EAAQE,IAAIO,QACkB7C,IAA1BO,KAAKW,MAAM2B,GACbhB,EAAWlB,GAEX4B,EAAMC,QAAQ7B,OAnFxB,mCAkGIJ,KAAKwC,KAAK,GAAI,EAAGpD,EAAMgC,OACvBpB,KAAKwC,KAAK,EAAG,EAAGpD,EAAMiC,OACtBrB,KAAKwC,IAAI,GAAI,EAAGpD,EAAMiC,OACtBrB,KAAKwC,IAAI,EAAG,EAAGpD,EAAMgC,SArGzB,mCAwGwB9B,EAAWC,GAC/B,IAAMkD,EAAIC,KAAKC,IAAIrD,EAAI,IAAOoD,KAAKC,IAAIpD,EAAI,IAC3C,OAAO,EAAIkD,EAAIA,GAAKnD,GAAK,EAAI,GAAK,GAAKmD,EAAIlD,IA1G/C,mCA6GwBmC,GAEpB,IADA,IAAIe,EAAI,EACDf,GAAS,EAAIe,GAAKA,EAAI,IAC3BA,IAEFf,GAAS,GAAKe,EAAI,GAAKA,EACvB,IAAMG,EAAIF,KAAKG,MAAMnB,EAAQe,GAC7B,MAAO,CACLnD,GAAW,IAANsD,GAAiB,IAANA,EAAYlB,EAAY,EAAJe,GAAWf,EAAQ,IAAa,IAANkB,EAAc,EAAJH,EAAQ,GAChFlD,EAAGmC,EAAQe,GAAKG,GAAK,EAAI,EAAI,MAtHnC,iCA0FI,OAAO5C,KAAKY,cA1FhB,iCA8FI,OAAOZ,KAAKa,gBA9FhB,KEZML,EAAK,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GAC9BC,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,I,SAExBrB,O,iBAAAA,I,iBAAAA,I,kBAAAA,M,KAuBL,IAAM0D,EAKX,WAAaC,EAAuBC,GAAwB,yBAJ5CD,kBAI2C,OAH3CC,kBAG2C,OAF3CC,YAE2C,EACzDjD,KAAK+C,aAAeA,EACpB/C,KAAKgD,aAAeA,EAChBD,IAAc/C,KAAKiD,OAASP,KAAKO,WAIlC,SAASC,IACdxE,EAAMwE,QACNC,EAAO/D,EAAMgC,MACbgC,EAAe,CACbC,MAAO,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,GAEvCC,IAGK,SAASC,EAAUpE,EAAWC,GACnC,GAAIb,EAAMyC,GAAG7B,EAAGC,KAAOH,EAAM6B,MAC3B,OAAO,EAKT,IAFA,IAAM0C,EAAS,IAAI7C,MAEVuB,EAAI,EAAGA,EAAI,EAAGA,IAGrB,IAFA,IAAMuB,EAAO,IAAI9C,MAER+C,EAAI,GAAKA,IAAK,CACrB,IAAMC,EAAKxE,EAAIkB,EAAG6B,GAAKwB,EACjBE,EAAKxE,EAAIkB,EAAG4B,GAAKwB,EACjBpC,EAAQ/C,EAAMyC,GAAG2C,EAAIC,GAC3B,GAAItC,IAAUrC,EAAM6B,MAClB,MACA,GAAIQ,IAAU0B,EAAM,CACpBQ,EAAOK,KAAP,MAAAL,EAAeC,GACf,MAEAA,EAAKI,KAAK,CACR1E,EAAGwE,EACHvE,EAAGwE,EACHtC,MAAO0B,EACPc,SAAU,IAAInB,GAAS,EAAMe,EAAI,KAMzC,OAAsB,IAAlBF,EAAOpD,SAIXoD,EAAOK,KAAK,CACV1E,EAAGA,EACHC,EAAGA,EACHkC,MAAO0B,EACPc,SAAU,IAAInB,GAAS,KAEVa,EAsEPnC,SAAQ,SAAA0C,GACdxF,EAAM8D,IAAI0B,EAAO5E,EAAG4E,EAAO3E,EAAG2E,EAAOzC,UAIzC,SAA6BnC,EAAWC,GACtC6D,EAAaC,KAAOX,KAAKyB,IAAI7E,EAAG8D,EAAaC,MAC7CD,EAAaG,MAAQb,KAAK0B,IAAI9E,EAAI,EAAG8D,EAAaG,OAClDH,EAAaE,IAAMZ,KAAKyB,IAAI5E,EAAG6D,EAAaE,KAC5CF,EAAaI,OAASd,KAAK0B,IAAI7E,EAAI,EAAG6D,EAAaI,QA9EnDa,CAAmB/E,EAAGC,IAsHG,IAArBb,EAAM4F,WACDlF,EAAMgC,MACiB,IAArB1C,EAAM6F,WACRnF,EAAMiC,MAENjC,EAAM6B,SAzHK7B,EAAM6B,OACxBkC,EAAO/D,EAAM6B,MACbuD,EAAc,GACPb,IAGTc,IACAhB,IAE2B,IAAvBe,EAAYjE,SACdkE,IACAhB,KAGKE,IAGF,SAASe,IACd,IAAMC,EAA2B,GAWjC,OATAjG,EAAMkG,mBAAkB,SAACzC,EAAOV,GAC9BkD,EAAYX,KAAK,CACf1E,EAAG6C,EAAM7C,EACTC,EAAG4C,EAAM5C,EACTkC,MAAOA,EACPwC,SAAU,IAAInB,GAAS,QAIpB6B,EAGF,SAASE,IACd,OAAOL,EAGF,SAASM,IACd,OAAOpG,EAAM6F,WAGR,SAASQ,IACd,OAAOrG,EAAM4F,WAGR,SAASU,IACd,OAAO7B,EAGF,SAAS8B,IACd,OAAO7B,EAOT,SAASK,IACPe,EAAc,GAEd9F,EAAMwG,0BAAyB,SAAA/C,IA4BjC,SAAsB7C,EAAWC,GAC/B,GAAIb,EAAMyC,GAAG7B,EAAGC,KAAOH,EAAM6B,MAC3B,OAAO,EAGT,IAAK,IAAIoB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,IAFA,IAAI8C,GAAiB,EAEZtB,EAAI,GAAKA,IAAK,CACrB,IAAMC,EAAKxE,EAAIkB,EAAG6B,GAAKwB,EACjBE,EAAKxE,EAAIkB,EAAG4B,GAAKwB,EACjBpC,EAAQ/C,EAAMyC,GAAG2C,EAAIC,GAC3B,GAAItC,IAAUrC,EAAM6B,MAAO,CACzBkE,GAAiB,EACjB,MACA,GAAI1D,IAAU0B,EACd,MAEAgC,GAAiB,EAIrB,GAAIA,EAAgB,OAAO,EAG7B,OAAO,GApDDC,CAAYjD,EAAM7C,EAAG6C,EAAM5C,IAC7BiF,EAAYR,KAAK7B,MAkBvB,SAASsC,IAELtB,EADEA,IAAS/D,EAAMgC,MACVhC,EAAMiC,MAENjC,EAAMgC,MA0CjB,IACI+B,EACAC,EACAoB,EAHE9F,EAAQ,IAAIgC,EAKlBwC,ICtNA,ICRYmC,EDQNC,EAASC,YAAa,CAC1BC,QAAS,CACPC,kBAAmB,YACnBC,UAAW,qEAEbC,OAAQ,CACNF,kBAAmB,YACnBC,UAAW,qEAYTtG,E,kDAGJ,WAAaC,GAA8B,IAAD,8BACxC,cAAMA,IAHAuG,UAEkC,EAGxC,EAAKA,KAAO,EAH4B,E,qDAMlB,IAAD,MACbC,EAAY7F,KAAKX,MAAjBwG,QAEFC,EAAU9F,KAAKX,MAAM4E,SAASlB,cAAiB/C,KAAKX,MAAM4E,SAAShB,SAAWjD,KAAK4F,KAGzF,OAFA5F,KAAK4F,KAAL,UAAY5F,KAAKX,MAAM4E,SAAShB,cAAhC,QAA0C,EAGxC,gBAAC,EAAD,CAAe3D,EAAGU,KAAKX,MAAM0G,GAAIxG,EAAGS,KAAKX,MAAM2G,IAC7C,0BAAQC,MAAO,CAAEC,eAAe,GAAD,OAA+C,IAA1C,UAAClG,KAAKX,MAAM4E,SAASjB,oBAArB,QAAqC,GAA1C,OAC7BmD,UAAWC,IAAW,eAAGP,EAAQL,QAAUM,IAAYO,EAAGrG,KAAKX,MAAMgH,EACrEC,KAAMtG,KAAKX,MAAMoC,QAAU8E,EAAWnF,MAAQ3C,EAAOC,MAAMI,gBAAkBL,EAAOC,MAAMG,kBAC5F,0BAAQoH,MAAO,CAAEC,eAAe,GAAD,OAA+C,IAA1C,UAAClG,KAAKX,MAAM4E,SAASjB,oBAArB,QAAqC,GAA1C,OAC7BmD,UAAWC,IAAW,eAAGP,EAAQF,OAASG,IAAYO,EAAGrG,KAAKX,MAAMgH,EACpEC,KAAMtG,KAAKX,MAAMoC,QAAU8E,EAAWnF,MAAQ3C,EAAOC,MAAMG,gBAAkBJ,EAAOC,MAAMI,uB,GAtBhF0H,aA4BLC,cAAWnB,EAAXmB,CAAmBrH,GErDrBsH,EAAe,I,MAAIC,c,qCDFpBtB,O,iBAAAA,I,cAAAA,M,kBEiBZ,IAAMC,GAASC,YAAa,CAC1BqB,eAAgB,CACdC,MAAO,OACPC,OAAQ,QAEVpI,MAAO,CACLqI,QAAS,QACTC,SAAU,YAEZC,WAAY,CACVC,OAAQ,QAEVC,eAAgB,CACdD,OAAQ,cAINE,GAAY,CAAC,KAAO,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,GAAK,GAAK,EAAG,IAAK,KAAM,IAAK,KAAM,EAAG,IAAK,EAAG,EAAG,GAwBxG1G,G,kDAeJ,WAAarB,GAA8B,IAAD,8BACxC,cAAMA,IAfSgI,oBAcyB,IAbzBC,uBAayB,IAZzBC,UAYyB,IAXzBC,YAWyB,IATlCC,gBASkC,IAPlCC,cAOkC,IANlCC,uBAMkC,IALlCC,kBAKkC,IAJlCC,kBAIkC,IAHlCC,iBAGkC,IAFlCC,iBAEkC,EAGxC,EAAKT,kBAAoBd,cACzB,EAAKe,KAAOf,cACZ,EAAKgB,OAAShB,cACd,EAAKa,eAAiB,IAAIW,mBAAe,SAAAC,GACvC,EAAKC,OAAOD,EAAQ,GAAGE,YAAYtB,MAAOoB,EAAQ,GAAGE,YAAYrB,WAGnE,EAAKW,WAAa,EAElB,EAAKC,UAAW,EAChB,EAAKC,kBAAoB,EACzB,EAAKC,aAAe,EACpB,EAAKC,aAAe,EACpB,EAAKC,YAAc,EACnB,EAAKC,YAAc,EAEnB,EAAKK,mBAAqB,EAAKA,mBAAmBxG,KAAxB,gBAC1B,EAAKyG,QAAU,EAAKA,QAAQzG,KAAb,gBACf,EAAK0G,qBAAuB,EAAKA,qBAAqB1G,KAA1B,gBAC5B,EAAK2G,oBAAsB,EAAKA,oBAAoB3G,KAAzB,gBAC3B,EAAK4G,yBAA2B,EAAKA,yBAAyB5G,KAA9B,gBAChC,EAAK6G,sBAAwB,EAAKA,sBAAsB7G,KAA3B,gBAC7B,EAAK8G,4BAA8B,EAAKA,4BAA4B9G,KAAjC,gBAEnC,EAAK+G,MAAQ,CACX9B,MAAO,EACPC,OAAQ,EACR8B,QAAS,EACTC,QAAS,EACTC,MAAO,EACPC,YAAY,GAjC0B,E,gEAsCD,OAAnC/I,KAAKsH,kBAAkB0B,SACzBhJ,KAAKqH,eAAe4B,QAAQjJ,KAAKsH,kBAAkB0B,SAGrDtC,EAAawC,GAAG,WAAYlJ,KAAKmJ,QAAQvH,KAAK5B,OAC9C0G,EAAawC,GAAG,aAAclJ,KAAKoJ,UAAUxH,KAAK5B,S,6BAG5C6G,EAAeC,GAAuB,IAAD,OAC3C9G,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CACnCwH,MAAOA,EACPC,OAAQA,EACR8B,QAASU,EAAUV,SAAW/B,EAAQyC,EAAUzC,OAAS,EACzDgC,QAASS,EAAUT,SAAW/B,EAASwC,EAAUxC,QAAU,MACzD,WACF,EAAKyC,SAAS,EAAKZ,MAAMC,QAAS,EAAKD,MAAME,c,+BAIvCvJ,EAAWC,GACnB,IAAMiK,IAASxJ,KAAKX,MAAMkH,KAAKnD,aAAaG,MAAQ,GAAKvD,KAAKyJ,oBACxDC,EAAO1J,KAAK2I,MAAM9B,OAA8C,EAApC7G,KAAKX,MAAMkH,KAAKnD,aAAaC,MAAYrD,KAAKyJ,oBAC1EE,IAAS3J,KAAKX,MAAMkH,KAAKnD,aAAaI,OAAS,GAAKxD,KAAKyJ,oBACzDG,EAAO5J,KAAK2I,MAAM7B,QAA8C,EAAnC9G,KAAKX,MAAMkH,KAAKnD,aAAaE,KAAWtD,KAAKyJ,oBAC1EI,EAA6B,GAAnB7J,KAAK2I,MAAM9B,MACrBiD,EAA8B,GAApB9J,KAAK2I,MAAM7B,OAC3B9G,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CACnCuJ,QAASmB,IAAMzK,EAAGkK,EAAOK,EAASH,EAAOG,GACzChB,QAASkB,IAAMxK,EAAGoK,EAAOG,EAASF,EAAOE,S,8BAIpCE,EAAkBC,GACzBjK,KAAKyH,WAAasC,IAAM/J,KAAKyH,WAAa,EAAG,EAAGL,GAAU7G,OAAS,GACnEP,KAAKkK,SAAS9C,GAAUpH,KAAKyH,YAA7B,OAA0CuC,QAA1C,IAA0CA,IAAW,EAArD,OAAwDC,QAAxD,IAAwDA,IAAW,K,gCAG1DD,EAAkBC,GAC3BjK,KAAKyH,WAAasC,IAAM/J,KAAKyH,WAAa,EAAG,EAAGL,GAAU7G,OAAS,GACnEP,KAAKkK,SAAS9C,GAAUpH,KAAKyH,YAA7B,OAA0CuC,QAA1C,IAA0CA,IAAW,EAArD,OAAwDC,QAAxD,IAAwDA,IAAW,K,+BAG3DnB,EAAekB,EAAiBC,GACxC,IAAM3K,EAAI0K,EAAUlB,EAAQ9I,KAAK2I,MAAMG,OAASkB,EAAUhK,KAAK2I,MAAMC,SAC/DrJ,EAAI0K,EAAUnB,EAAQ9I,KAAK2I,MAAMG,OAASmB,EAAUjK,KAAK2I,MAAME,SACrE7I,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CACnCyJ,MAAOA,EACPF,QAAStJ,EACTuJ,QAAStJ,Q,8BAIJ4K,GACP,GAA0B,OAAtBnK,KAAKuH,KAAKyB,SAA4C,OAAxBhJ,KAAKwH,OAAOwB,SAAoBhJ,KAAKX,MAAMX,MAAM0L,OAAS/E,EAAKjG,MAAO,CACtG,IAAMI,EClKL,SAA2BF,EAAWC,EAAW8K,EAA6BC,GAA+B,IAAD,EAC3G9K,EAAI8K,EAAIC,iBAGd,OAFA/K,EAAEF,EAAIA,EACNE,EAAED,EAAIA,EACCC,EAAEgL,gBAAF,UAAkBH,EAAQI,sBAA1B,aAAkB,EAAwBC,WD8JnCC,CAAiBR,EAAES,QAAST,EAAEU,QAAS7K,KAAKuH,KAAKyB,QAAShJ,KAAKwH,OAAOwB,SAC1E9H,EAAOlB,KAAK8K,iBAAiBtL,EAAEF,EAAGE,EAAED,GAC1CS,KAAKX,MAAM0L,iBAAiB7J,EAAK,GAAIA,EAAK,O,yCAI1BiJ,GAClB,IAAM7K,EAAIU,KAAK2I,MAAMC,QAAUuB,EAAES,QAC3BrL,EAAIS,KAAK2I,MAAME,QAAUsB,EAAEU,QAE7BV,EAAEa,OAAS,EAAGhL,KAAKmJ,QAAQ7J,EAAGC,GAC7BS,KAAKoJ,UAAU9J,EAAGC,K,2CAGH4K,GACpBnK,KAAK0H,UAAW,I,0CAGGyC,GACnB,GAAInK,KAAK2I,MAAMI,WACb,GAAyB,IAArBoB,EAAEc,QAAQ1K,OAAc,CAC1B,IAAMC,EAAK2J,EAAEc,QAAQ,GAAGC,QAAUlL,KAAK4H,aACjCnH,EAAK0J,EAAEc,QAAQ,GAAGE,QAAUnL,KAAK6H,aACvC7H,KAAKuJ,SAASvJ,KAAK8H,YAActH,EAAIR,KAAK+H,YAActH,QAExDT,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CAAE0J,YAAY,Q,+CAK/BoB,GACnBnK,KAAK2I,MAAMI,YAAe/I,KAAKX,MAAMX,MAAM0L,OAAS/E,EAAK+F,KAAoB,IAAbjB,EAAEkB,SACrErL,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CAAE0J,YAAY,MACnD/I,KAAK2H,kBAAoBwC,EAAEmB,UAC3BtL,KAAK4H,aAAeuC,EAAEe,QACtBlL,KAAK6H,aAAesC,EAAEgB,QACtBnL,KAAK8H,YAAc9H,KAAK2I,MAAMC,QAC9B5I,KAAK+H,YAAc/H,KAAK2I,MAAME,W,4CAIXsB,GACrB,IAAInK,KAAK0H,UAEL1H,KAAK2I,MAAMI,WAAY,CACzB,IAAMvI,EAAK2J,EAAEe,QAAUlL,KAAK4H,aACtBnH,EAAK0J,EAAEgB,QAAUnL,KAAK6H,aAC5B7H,KAAKuJ,SAASvJ,KAAK8H,YAActH,EAAIR,KAAK+H,YAActH,M,kDAI/B0J,GAC3BnK,KAAKqJ,UAAS,SAACC,EAAWjK,GAAZ,MAAuB,CAAE0J,YAAY,Q,+BAG7B,IAAD,IACM/I,KAAKX,MAAxBwG,EADa,EACbA,QAASnH,EADI,EACJA,MAEjB,OACE,uBAAK6M,IAAKvL,KAAKsH,kBACbnB,UAAWC,IAAWP,EAAQe,gBAAT,mBAClBf,EAAQoB,WAAavI,EAAM0L,OAAS/E,EAAK+F,MAAQpL,KAAK2I,MAAMI,YAD1C,cAElBlD,EAAQsB,eAAiBnH,KAAK2I,MAAMI,YAFlB,IAIrByC,cAAexL,KAAKwI,yBACpBiD,QAASzL,KAAKoI,oBACd,gBAAC,KAAD,CAAesD,OAAO,SACpBC,aAAc3L,KAAKsI,qBACnBsD,YAAa5L,KAAKuI,oBAClBsD,cAAe7L,KAAKyI,sBACpBqD,YAAa9L,KAAK0I,4BAClBqD,eAAgB/L,KAAK0I,4BACrBsD,gBAAiBhM,KAAK0I,8BACxB,uBAAKvC,UAAWN,EAAQnH,MAAOuN,MAAM,6BACnCpF,MAAO7G,KAAK2I,MAAM9B,MAAOC,OAAQ9G,KAAK2I,MAAM7B,OAAQyE,IAAKvL,KAAKwH,QAC9D,gBAAC,EAAD,CAAelI,EAAGU,KAAK2I,MAAMC,QAASrJ,EAAGS,KAAK2I,MAAME,SAClD,qBAAG0C,IAAKvL,KAAKuH,KAAMc,QAASrI,KAAKqI,SAC9BrI,KAAKkM,mBACLlM,KAAKmM,gBACLnM,KAAKoM,eACLpM,KAAKqM,oB,uCAQQ/M,EAAWC,GACnC,MAAO,CACLmD,KAAKG,MAAMvD,EAAIU,KAAKyJ,qBACpB/G,KAAKG,MAAMtD,EAAIS,KAAKyJ,wB,0CAKtB,OAAOhL,EAAOC,MAAMM,SAAWgB,KAAK2I,MAAMG,Q,0CAI1C,OAAOrK,EAAOC,MAAMQ,SAAWc,KAAK2I,MAAMG,Q,yCAGF,IAChCvC,EAASvG,KAAKX,MAAdkH,KAER,OAAO,wBAAMjH,GAAIiH,EAAKnD,aAAaC,KAAO,GAAKrD,KAAKyJ,oBAClDlK,GAAIgH,EAAKnD,aAAaE,IAAM,GAAKtD,KAAKyJ,oBACtC5C,OAAQN,EAAKnD,aAAaG,MAAQgD,EAAKnD,aAAaC,KAAO,GAAKrD,KAAKyJ,oBACrE3C,QAASP,EAAKnD,aAAaI,OAAS+C,EAAKnD,aAAaE,IAAM,GAAKtD,KAAKyJ,oBACtEnD,KAAM7H,EAAOC,MAAMC,mB,sCAWrB,IARuC,IAC/B4H,EAASvG,KAAKX,MAAdkH,KACF+F,EAAyB,GACzBC,GAAMhG,EAAKnD,aAAaC,KAAO,GAAKrD,KAAKyJ,oBACzC+C,GAAMjG,EAAKnD,aAAaE,IAAM,GAAKtD,KAAKyJ,oBACxCgD,GAAKlG,EAAKnD,aAAaG,MAAQgD,EAAKnD,aAAaC,KAAO,GAAKrD,KAAKyJ,oBAClEiD,GAAKnG,EAAKnD,aAAaI,OAAS+C,EAAKnD,aAAaE,IAAM,GAAKtD,KAAKyJ,oBAE/DpH,EAAI,EAAGA,GAAMkE,EAAKnD,aAAaI,OAAS+C,EAAKnD,aAAaE,IAAM,EAAIjB,IAAK,CAChF,IAAM9C,EAAI8C,EAAIrC,KAAKyJ,oBACnB6C,EAAQtI,KAAK,wBAAM2I,IAAG,WAAMtK,GAAKyB,GAAIyI,EAAIxI,GAAIyI,EAAKjN,EAAGqN,GAAIL,EAAKE,EAAGI,GAAIL,EAAKjN,EACxEuN,OAAQrO,EAAOC,MAAME,YAAamO,YAAa,KAEnD,IAAK,IAAI1K,EAAI,EAAGA,GAAMkE,EAAKnD,aAAaG,MAAQgD,EAAKnD,aAAaC,KAAO,EAAIhB,IAAK,CAChF,IAAM/C,EAAI+C,EAAIrC,KAAKyJ,oBACnB6C,EAAQtI,KAAK,wBAAM2I,IAAG,WAAMtK,GAAKyB,GAAIyI,EAAKjN,EAAGyE,GAAIyI,EAAII,GAAIL,EAAKjN,EAAGuN,GAAIL,EAAKE,EACxEI,OAAQrO,EAAOC,MAAME,YAAamO,YAAa,KAGnD,OAAOT,I,qCAG+B,IAAD,OAGrC,OAFiBtM,KAAKX,MAAdkH,KAEI5F,MAAMqM,KAAI,SAAA9L,GACpB,OAAO,gBAAC,EAAD,CAAOyL,IAAG,UAAKzL,EAAK5B,EAAV,YAAe4B,EAAK3B,GACnCwG,IAAK7E,EAAK5B,EAAI,IAAO,EAAKmK,oBAC1BzD,IAAK9E,EAAK3B,EAAI,IAAO,EAAKkK,oBAC1BpD,EAAG5H,EAAOC,MAAMO,YAAc,EAAK0J,MAAMG,MACzCrH,MAAOP,EAAKO,MACZwC,SAAU/C,EAAK+C,gB,oCAIkB,IAAD,OAGpC,OAFiBjE,KAAKX,MAAdkH,KAEI/B,YAAYwI,KAAI,SAAC7K,EAAOE,GAClC,OAAO,wBAAMsK,IAAKtK,EAChB/C,GAAI6C,EAAM7C,EAAI,IAAO,EAAKmK,oBAAsB,EAAKwD,oBAAsB,EAC3E1N,GAAI4C,EAAM5C,EAAI,IAAO,EAAKkK,oBAAsB,EAAKwD,oBAAsB,EAC3EpG,MAAO,EAAKoG,oBACZnG,OAAQ,EAAKmG,oBACb3G,KAAM7H,EAAOC,MAAMK,mB,GAxQPyH,aA6QL0G,iBA5RS,SAACvE,GAAD,sBAA+BA,MAE5B,SAACwE,GAAD,MAA8D,CACvFpC,iBAAkB,SAACzL,EAAGC,GAAJ,OAAU4N,EE3BN,SAAC7N,EAAWC,GAAZ,MAAwC,CAC9D6N,KAAM,iBACN9N,IACAC,KFwBqCmE,CAASpE,EAAGC,QAyRpC2N,CAGbzG,YAAWnB,GAAXmB,CAAmB/F,K,8EGnUf2M,GAAYC,cAAW,SAACC,GAAD,MAAmB,CAC9CC,UAAW,CACT9N,UAAW,oBAEb+N,kBAAmB,CACjBC,WAAYH,EAAMI,QAAQD,WAAWE,WA0C1BC,OAtCf,WACE,IAAMhI,EAAUwH,KACVF,EAAWW,eAFiB,EAIVtH,WAAe,SAJL,oBAI3B4D,EAJ2B,KAIrB2D,EAJqB,KAqBlC,OACE,gBAACC,GAAA,EAAD,CAAK7H,UAAWN,EAAQ2H,UAAWxG,SAAS,QAAQxD,OAAQ,EAAGH,KAAK,MAAM4K,GAAI,GAC5E,gBAACC,GAAA,EAAD,CAAmB/H,UAAWN,EAAQ4H,kBAAmBU,KAAK,QAAQlO,MAAOmK,EAAMgE,WAAS,EAACC,SAjB5E,SAAClE,EAAkCmE,GACtD,GAAgB,OAAZA,EAAJ,CACA,OAAQA,GACN,IAAK,QACHnB,EDnBwC,CAC9CC,KAAM,qBCmBA,MACF,IAAK,MACHD,EDlBsC,CAC5CC,KAAM,mBCsBJW,EAAQO,MAMJ,gBAACC,GAAA,EAAD,CAActO,MAAM,QAAQuO,aAAW,aACrC,gBAACC,GAAA,EAAD,CAASC,SAAS,SAChB,wBAAMC,EAAE,qIAAqIC,SAAS,YACtJ,wBAAMD,EAAE,2TAA2TC,SAAS,cAGhV,gBAACL,GAAA,EAAD,CAActO,MAAM,MAAMuO,aAAW,OACnC,gBAAC,KAAD,CAAqBE,SAAS,c,sECtClCrB,GAAYC,cAAW,SAACC,GAAD,MAAmB,CAC9CsB,KAAM,CACJ9H,QAAS,QAEX+H,0BAA2B,CACzB/H,QAAS,QAEXgI,UAAW,CACTC,WAAW,OAAD,OAASzB,EAAM0B,YAAYC,SAASC,QAApC,cAAiD5B,EAAM0B,YAAYG,OAAOC,UAEtFC,cAAe,CACbC,UAAW,oBAEbC,KAAM,CACJ9B,WAAY,SAEd+B,aAAc,CACZC,WAAY,YA0CDC,OAtCf,WACE,IAAM9J,EAAUwH,KACVlK,EAAOyM,cAA0B,SAAAjH,GAAK,OAAIA,EAAMpC,KAAKpD,QACrDoB,EAAaqL,cAA0B,SAAAjH,GAAK,OAAIA,EAAMpC,KAAKhC,cAC3DD,EAAasL,cAA0B,SAAAjH,GAAK,OAAIA,EAAMpC,KAAKjC,cAEjE,OACE,gBAAC0J,GAAA,EAAD,CAAKhH,SAAS,QAAQ1D,IAAK,EAAGC,MAAO,EAAGsM,GAAI,EAAGC,GAAI,GACjD,gBAACC,GAAA,EAAD,CAAM5J,UAAWN,EAAQgJ,MACvB,gBAACb,GAAA,EAAD,CAAK7H,UAAWC,IAAW,eAAGP,EAAQiJ,0BAA4B3L,IAAS/D,EAAM6B,QAAU8F,QAAQ,OAAO8I,GAAI,EAAGC,IAAK,EAAG7B,GAAI,EAAG+B,GAAI,GAClI,gBAAC,KAAD,CAAgBC,MAAM,SACpB9J,UAAWC,IAAWP,EAAQkJ,UAAT,eAAuBlJ,EAAQyJ,cAAgBnM,IAAS/D,EAAMiC,QAAUqN,SAAS,WAE1G,gBAACwB,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,KACE,gBAAC3B,GAAA,EAAD,CAASC,SAAS,SAChB,0BAAQ3I,GAAI,GAAIC,GAAI,GAAIK,EAAG,GAAIC,KAAM7H,EAAOC,MAAMG,gBAChDiO,OAAQrO,EAAOC,MAAMI,gBAAiBiO,YAAa,OAGzD,gBAACsD,GAAA,EAAD,CAAclK,UAAWN,EAAQ4J,aAAca,QAAS/L,KAE1D,gBAAC4L,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,KACE,gBAAC3B,GAAA,EAAD,CAASC,SAAS,SAChB,0BAAQ3I,GAAI,GAAIC,GAAI,GAAIK,EAAG,GAAIC,KAAM7H,EAAOC,MAAMI,gBAChDgO,OAAQrO,EAAOC,MAAMI,gBAAiBiO,YAAa,OAGzD,gBAACsD,GAAA,EAAD,CAAclK,UAAWN,EAAQ4J,aAAca,QAAShM,S,2DCtD9D+I,GAAYC,cAAW,SAACC,GAAD,MAAmB,CAC9CgD,YAAa,CACX7C,WAAYH,EAAMI,QAAQD,WAAWE,OAEvCvC,OAAQ,CACNmF,QAAS,GACTP,MAAO1C,EAAMI,QAAQ8C,KAAKC,eA6BfC,OAzBf,WACE,IAAM9K,EAAUwH,KAUhB,OACE,gBAACW,GAAA,EAAD,CAAKhH,SAAS,QAAQzD,MAAO,EAAGC,OAAQ,EAAGsM,GAAI,EAAG7B,GAAI,GACpD,gBAAC2C,GAAA,EAAD,CAAazK,UAAWN,EAAQ0K,YAAaM,YAAY,WAAW1C,KAAK,SACvE,gBAAC2C,GAAA,EAAD,CAAQ3K,UAAWN,EAAQwF,OAAQhD,QAX1B,WACb3B,EAAaqK,KAAK,cAWZ,gBAAC,KAAD,CAAYrC,SAAS,WAEvB,gBAACoC,GAAA,EAAD,CAAQ3K,UAAWN,EAAQwF,OAAQhD,QAVzB,WACd3B,EAAaqK,KAAK,gBAUZ,gBAAC,KAAD,CAAarC,SAAS,cCjBjBsC,OAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,qCCTAC,GAAe,CACnB9G,KAAM/E,EAAKjG,OA2BE+R,GAtBM,WAA+D,IAA9DxI,EAA6D,uDAArDuI,GAAcE,EAAuC,uCACjF,OAAQA,EAAOhE,MACb,IAAK,mBAKH,OAJAzE,EAAK,2BACAA,GADA,IAEHyB,KAAM/E,EAAKjG,QAIf,IAAK,iBAKH,OAJAuJ,EAAK,2BACAA,GADA,IAEHyB,KAAM/E,EAAK+F,MAIf,QACE,OAAOzC,I,SCbPuI,GAA0B,CAC9B/N,KAAM/D,EAAMgC,MACZgC,aAAc,CACZC,KAAM,EAAGC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAErCe,WAAY,EACZD,WAAY,EACZ3D,MAAO,GACP6D,YAAa,ICjBT6M,GAAuB,CAC3B3S,MAAOyS,GACP5K,KDkBkB,WAA8D,IAA7DoC,EAA4D,uDAApDuI,GAAcE,EAAsC,uCAC/E,OAAQA,EAAOhE,MACb,IAAK,aAEH,OADAlK,IACO,CACLC,KAAM6B,IACN5B,aAAc6B,IACdV,WAAYO,IACZR,WAAYS,IACZpE,MAAO+D,IACPF,YAAaK,KAGjB,IAAK,iBACH,IAAMyM,EAAcF,EACdG,EAAe7N,EAAS4N,EAAYhS,EAAGgS,EAAY/R,GACzD,IAAqB,IAAjBgS,EAAwB,OAAO5I,EACnC,IAAM6I,EAAc,IAAI1P,IAAIyP,EAAavE,KAAI,SAAA9L,GAAI,gBAAOA,EAAK5B,EAAZ,YAAiB4B,EAAK3B,OACvE,MAAO,CACL4D,KAAM6B,IACN5B,aAAc6B,IACdV,WAAYO,IACZR,WAAYS,IACZpE,MAAM,GAAD,oBACA4Q,GADA,aAEA5I,EAAMhI,MAAM8Q,QAAO,SAAAvQ,GAAI,OAAKsQ,EAAYjP,IAAZ,UAAmBrB,EAAK5B,EAAxB,YAA6B4B,EAAK3B,OAAMyN,KAAI,SAAA9L,GAIzE,OADAA,EAAK+C,SAAW,IAAInB,GAAS,GACtB5B,OAGXsD,YAAaK,KAGjB,QACE,OAAO8D,KCjDA+I,GAAcC,aAAuCN,ICRhEO,QAAQC,IAAI,iEACV,gHACFD,QAAQC,IAAR,4wEAkB4B,kGAC5BD,QAAQC,IAAI,4CACV,wGACA,2DCZJ,IAAMC,GCFIC,aACNL,GACA,iCAAkCM,OAASA,OAAOC,oCAAiCxS,GDEvFqS,GAAM3E,STD0C,CAC9CC,KAAM,eSER,IAAMG,GAAQ2E,YAAe,CAC3BvE,QAAS,CACPP,KAAM,QACNkD,QAAS6B,OAIbC,KAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,KAAD,CAAUR,MAAOA,IACf,kBAACS,EAAA,EAAD,CAAehF,MAAOA,IACpB,kBAACiF,EAAA,EAAD,MACA,kBAAC,GAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.59865fb8.chunk.js","sourcesContent":["const Styles = {\r\n  board: {\r\n    backgoundColor: 'rgb(76, 175, 80)',\r\n    borderColor: 'rgba(33, 33, 33, 0.3)',\r\n    whiteStoneColor: 'rgb(250, 250, 250)',\r\n    blackStoneColor: 'rgb(33, 33, 33)',\r\n    hintColor: 'rgba(255, 255, 255, 0.3)',\r\n    cellSize: 50,\r\n    stoneRadius: 20,\r\n    hintSize: 15\r\n  }\r\n}\r\n\r\nexport default Styles\r\n","import React from 'react'\r\n\r\ninterface SVGTranslatorProps extends React.SVGProps<SVGGElement> {\r\n  x?: number\r\n  y?: number\r\n  children: React.ReactNode\r\n}\r\n\r\nfunction SVGTranslator (props: SVGTranslatorProps): JSX.Element {\r\n  const x = props.x ?? 0\r\n  const y = props.y ?? 0\r\n  const p = { ...props, x: undefined, y: undefined }\r\n\r\n  return (\r\n    <g transform={`matrix(1, 0, 0, 1, ${x}, ${y})`} {...p}>\r\n      {props.children}\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default SVGTranslator\r\n","import Queue from 'utils/queue'\r\n\r\nconst dx = [1, 1, 0, -1, -1, -1, 0, 1]\r\nconst dy = [0, 1, 1, 1, 0, -1, -1, -1]\r\n\r\nenum Stone {\r\n  Empty, White, Black\r\n}\r\n\r\ninterface Point {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport class Board {\r\n  //\r\n  //     4  8\r\n  //  5  0  2  9\r\n  //  6  1  3 10\r\n  //     7 11\r\n  //\r\n  private cells: Stone[]\r\n\r\n  private _whiteCount: number\r\n  private _blackCount: number\r\n\r\n  constructor () {\r\n    this.cells = new Array(16)\r\n    this._whiteCount = 0\r\n    this._blackCount = 0\r\n    this.initialize()\r\n  }\r\n\r\n  reset (): void {\r\n    this.cells = new Array(16)\r\n    this._whiteCount = 0\r\n    this._blackCount = 0\r\n    this.initialize()\r\n  }\r\n\r\n  at (x: number, y: number): Stone {\r\n    return this.cells[this.pointToIndex(x, y)] ?? Stone.Empty\r\n  }\r\n\r\n  set (x: number, y: number, cell: Stone): void {\r\n    switch (this.at(x, y)) {\r\n      case Stone.White:\r\n        this._whiteCount--\r\n        break\r\n      case Stone.Black:\r\n        this._blackCount--\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    switch (cell) {\r\n      case Stone.White:\r\n        this._whiteCount++\r\n        break\r\n      case Stone.Black:\r\n        this._blackCount++\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    this.cells[this.pointToIndex(x, y)] = cell\r\n  }\r\n\r\n  forEachFilledCell (callbackfn: (point: Point, stone: Stone) => void, thisArg?: unknown): void {\r\n    this.cells.forEach((stone, index) => {\r\n      callbackfn(this.indexToPoint(index), stone)\r\n    }, thisArg)\r\n  }\r\n\r\n  forEachAdjacentEmptyCell (callbackfn: (point: Point) => void, thisArg?: unknown): void {\r\n    if (thisArg !== undefined) {\r\n      callbackfn = callbackfn.bind(thisArg)\r\n    }\r\n\r\n    const visited = new Set<number>()\r\n    visited.add(this.pointToIndex(0, 0))\r\n    const queue = new Queue<Point>()\r\n    queue.enqueue({ x: 0, y: 0 })\r\n\r\n    while (!queue.empty()) {\r\n      const point = queue.dequeue()\r\n\r\n      for (let i = 0; i < 8; i++) {\r\n        const next: Point = { x: point.x + dx[i], y: point.y + dy[i] }\r\n        const nextIndex = this.pointToIndex(next.x, next.y)\r\n        if (visited.has(nextIndex)) continue\r\n        visited.add(nextIndex)\r\n        if (this.cells[nextIndex] === undefined) {\r\n          callbackfn(next)\r\n        } else {\r\n          queue.enqueue(next)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get whiteCount (): number {\r\n    return this._whiteCount\r\n  }\r\n\r\n  get blackCount (): number {\r\n    return this._blackCount\r\n  }\r\n\r\n  private initialize (): void {\r\n    this.set(-1, -1, Stone.White)\r\n    this.set(-1, 0, Stone.Black)\r\n    this.set(0, -1, Stone.Black)\r\n    this.set(0, 0, Stone.White)\r\n  }\r\n\r\n  private pointToIndex (x: number, y: number): number {\r\n    const n = Math.abs(x + 0.5) + Math.abs(y + 0.5)\r\n    return 2 * n * n + (x >= 0 ? 1 : -1) * n + y\r\n  }\r\n\r\n  private indexToPoint (index: number): Point {\r\n    let n = 1\r\n    while (index >= 2 * n * (n + 1)) {\r\n      n++\r\n    }\r\n    index -= 2 * (n - 1) * n\r\n    const m = Math.floor(index / n)\r\n    return {\r\n      x: ((m === 1 || m === 2) ? (index - n * 2) : (-index - 1)) + (m === 3 ? n * 4 : 0),\r\n      y: index - n * (m <= 1 ? 1 : 3)\r\n    }\r\n  }\r\n}\r\n","interface Node<T> {\r\n  data: T\r\n  next: Node<T> | undefined\r\n}\r\n\r\nexport default class Queue<T> {\r\n  private _head: Node<T> | undefined\r\n  private _tail: Node<T> | undefined\r\n  private _length: number\r\n\r\n  constructor () {\r\n    this._head = undefined\r\n    this._tail = undefined\r\n    this._length = 0\r\n  }\r\n\r\n  get length (): number {\r\n    return this._length\r\n  }\r\n\r\n  enqueue (value: T): void {\r\n    const newNode: Node<T> = {\r\n      data: value,\r\n      next: undefined\r\n    }\r\n\r\n    if (this._tail === undefined) {\r\n      this._head = newNode\r\n      this._tail = newNode\r\n    } else {\r\n      this._tail.next = newNode\r\n      this._tail = newNode\r\n    }\r\n\r\n    this._length++\r\n  }\r\n\r\n  dequeue (): T {\r\n    if (this._head === undefined) {\r\n      throw new ReferenceError()\r\n    }\r\n\r\n    const headData = this._head.data\r\n    this._head = this._head.next\r\n\r\n    if (this._head === undefined) {\r\n      this._tail = undefined\r\n    }\r\n\r\n    this._length--\r\n\r\n    return headData\r\n  }\r\n\r\n  empty (): boolean {\r\n    return this.length === 0\r\n  }\r\n}\r\n","import { Board } from 'game/board'\r\n\r\nconst dx = [1, 1, 0, -1, -1, -1, 0, 1]\r\nconst dy = [0, 1, 1, 1, 0, -1, -1, -1]\r\n\r\nexport enum Stone {\r\n  Empty, White, Black\r\n}\r\n\r\nexport interface Point {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface Rect {\r\n  left: number\r\n  top: number\r\n  right: number\r\n  bottom: number\r\n}\r\n\r\nexport interface CellState {\r\n  x: number\r\n  y: number\r\n  stone: Stone\r\n  turnOver: TurnOver\r\n}\r\n\r\nexport class TurnOver {\r\n  public readonly isTurnedOver: boolean\r\n  public readonly turnOverStep?: number\r\n  public readonly random?: number\r\n\r\n  constructor (isTurnedOver: boolean, turnOverStep?: number) {\r\n    this.isTurnedOver = isTurnedOver\r\n    this.turnOverStep = turnOverStep\r\n    if (isTurnedOver) this.random = Math.random()\r\n  }\r\n}\r\n\r\nexport function reset (): void {\r\n  board.reset()\r\n  turn = Stone.White\r\n  boundingRect = {\r\n    left: -1, top: -1, right: 1, bottom: 1\r\n  }\r\n  enumerateMarkedCells()\r\n}\r\n\r\nexport function putStone (x: number, y: number): CellState[] | false {\r\n  if (board.at(x, y) !== Stone.Empty) {\r\n    return false\r\n  }\r\n\r\n  const result = new Array<CellState>()\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    const temp = new Array<CellState>()\r\n\r\n    for (let j = 1; ; j++) {\r\n      const x1 = x + dx[i] * j\r\n      const y1 = y + dy[i] * j\r\n      const stone = board.at(x1, y1)\r\n      if (stone === Stone.Empty) {\r\n        break\r\n      } if (stone === turn) {\r\n        result.push(...temp)\r\n        break\r\n      } else {\r\n        temp.push({\r\n          x: x1,\r\n          y: y1,\r\n          stone: turn,\r\n          turnOver: new TurnOver(true, j - 1)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  if (result.length === 0) {\r\n    return false\r\n  }\r\n\r\n  result.push({\r\n    x: x,\r\n    y: y,\r\n    stone: turn,\r\n    turnOver: new TurnOver(false)\r\n  })\r\n  reflectChanges(result)\r\n  updateBoundingRect(x, y)\r\n\r\n  if (isSettled() !== Stone.Empty) {\r\n    turn = Stone.Empty\r\n    markedCells = []\r\n    return result\r\n  }\r\n\r\n  changeTurn()\r\n  enumerateMarkedCells()\r\n\r\n  if (markedCells.length === 0) {\r\n    changeTurn()\r\n    enumerateMarkedCells()\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport function getFilledCells (): CellState[] {\r\n  const filledCells: CellState[] = []\r\n\r\n  board.forEachFilledCell((point, stone) => {\r\n    filledCells.push({\r\n      x: point.x,\r\n      y: point.y,\r\n      stone: stone,\r\n      turnOver: new TurnOver(false)\r\n    })\r\n  })\r\n\r\n  return filledCells\r\n}\r\n\r\nexport function getMarkedCells (): Point[] {\r\n  return markedCells\r\n}\r\n\r\nexport function getWhiteCount (): number {\r\n  return board.whiteCount\r\n}\r\n\r\nexport function getBlackCount (): number {\r\n  return board.blackCount\r\n}\r\n\r\nexport function getTurn (): Stone {\r\n  return turn\r\n}\r\n\r\nexport function getBoundingRect (): Rect {\r\n  return boundingRect\r\n}\r\n\r\nexport function isSettled (): Stone {\r\n  return isSettledInternal()\r\n}\r\n\r\nfunction enumerateMarkedCells (): void {\r\n  markedCells = []\r\n\r\n  board.forEachAdjacentEmptyCell(point => {\r\n    if (canPutStone(point.x, point.y)) {\r\n      markedCells.push(point)\r\n    }\r\n  })\r\n}\r\n\r\nfunction reflectChanges (changes: CellState[]): void {\r\n  changes.forEach(change => {\r\n    board.set(change.x, change.y, change.stone)\r\n  })\r\n}\r\n\r\nfunction updateBoundingRect (x: number, y: number): void {\r\n  boundingRect.left = Math.min(x, boundingRect.left)\r\n  boundingRect.right = Math.max(x + 1, boundingRect.right)\r\n  boundingRect.top = Math.min(y, boundingRect.top)\r\n  boundingRect.bottom = Math.max(y + 1, boundingRect.bottom)\r\n}\r\n\r\nfunction changeTurn (): void {\r\n  if (turn === Stone.White) {\r\n    turn = Stone.Black\r\n  } else {\r\n    turn = Stone.White\r\n  }\r\n}\r\n\r\nfunction canPutStone (x: number, y: number): boolean {\r\n  if (board.at(x, y) !== Stone.Empty) {\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let inOneDirection = false\r\n\r\n    for (let j = 1; ; j++) {\r\n      const x1 = x + dx[i] * j\r\n      const y1 = y + dy[i] * j\r\n      const stone = board.at(x1, y1)\r\n      if (stone === Stone.Empty) {\r\n        inOneDirection = false\r\n        break\r\n      } if (stone === turn) {\r\n        break\r\n      } else {\r\n        inOneDirection = true\r\n      }\r\n    }\r\n\r\n    if (inOneDirection) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction isSettledInternal (): Stone {\r\n  if (board.blackCount === 0) {\r\n    return Stone.White\r\n  } else if (board.whiteCount === 0) {\r\n    return Stone.Black\r\n  } else {\r\n    return Stone.Empty\r\n  }\r\n}\r\n\r\nconst board = new Board()\r\nlet turn: Stone\r\nlet boundingRect: Rect\r\nlet markedCells: Point[]\r\n\r\nreset()\r\n","import { createStyles, withStyles } from '@material-ui/core'\r\nimport { WithStyles } from '@material-ui/styles'\r\nimport classNames from 'classnames'\r\nimport Styles from 'components/styles'\r\nimport SVGTranslator from 'components/SvgTranslator'\r\nimport * as game from 'game'\r\nimport * as React from 'react'\r\n\r\nconst styles = createStyles({\r\n  turnOut: {\r\n    animationFillMode: 'backwards',\r\n    animation: 'turnOut 150ms cubic-bezier(0.0, 0, 0.2, 1), fadeOut 30ms steps(1)'\r\n  },\r\n  turnIn: {\r\n    animationFillMode: 'backwards',\r\n    animation: 'turnIn 150ms cubic-bezier(0.0, 0, 0.2, 1), fadeIn 30ms steps(1)'\r\n  }\r\n})\r\n\r\ninterface StoneProps extends WithStyles<typeof styles> {\r\n  cx: number\r\n  cy: number\r\n  r: number\r\n  stone: game.Stone\r\n  turnOver: game.TurnOver\r\n}\r\n\r\nclass Stone extends React.Component<StoneProps> {\r\n  private prev: number\r\n\r\n  constructor (props: Readonly<StoneProps>) {\r\n    super(props)\r\n\r\n    this.prev = 0\r\n  }\r\n\r\n  render (): JSX.Element {\r\n    const { classes } = this.props\r\n\r\n    const animate = this.props.turnOver.isTurnedOver && (this.props.turnOver.random !== this.prev)\r\n    this.prev = this.props.turnOver.random ?? 0\r\n\r\n    return (\r\n      <SVGTranslator x={this.props.cx} y={this.props.cy}>\r\n        <circle style={{ animationDelay: `${(this.props.turnOver.turnOverStep ?? 0) * 30}ms` }}\r\n          className={classNames({ [classes.turnOut]: animate })} r={this.props.r}\r\n          fill={this.props.stone === game.Stone.White ? Styles.board.blackStoneColor : Styles.board.whiteStoneColor} />\r\n        <circle style={{ animationDelay: `${(this.props.turnOver.turnOverStep ?? 0) * 30}ms` }}\r\n          className={classNames({ [classes.turnIn]: animate })} r={this.props.r}\r\n          fill={this.props.stone === game.Stone.White ? Styles.board.whiteStoneColor : Styles.board.blackStoneColor} />\r\n      </SVGTranslator>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Stone)\r\n","export enum Tool {\r\n  Stone,\r\n  Pan\r\n}\r\n","import { EventEmitter } from 'events'\r\n\r\nexport const eventEmitter = new EventEmitter()\r\n","import { createStyles, withStyles, WithStyles } from '@material-ui/core'\r\nimport clamp from 'clamp'\r\nimport classNames from 'classnames'\r\nimport Stone from 'components/Stone'\r\nimport Styles from 'components/styles'\r\nimport SVGTranslator from 'components/SvgTranslator'\r\nimport { eventEmitter } from 'eventEmitter'\r\nimport * as React from 'react'\r\nimport EventListener from 'react-event-listener'\r\nimport { connect } from 'react-redux'\r\nimport { Action } from 'redux'\r\nimport { putStone } from 'redux/actions'\r\nimport { State } from 'redux/reducers'\r\nimport { Tool } from 'redux/tool'\r\nimport { ResizeObserver } from 'resize-observer'\r\nimport { screenToRelative } from 'utils/svg'\r\n\r\nconst styles = createStyles({\r\n  boardContainer: {\r\n    width: '100%',\r\n    height: '100%'\r\n  },\r\n  board: {\r\n    display: 'block',\r\n    position: 'absolute'\r\n  },\r\n  grabCursor: {\r\n    cursor: 'grab'\r\n  },\r\n  grabbingCursor: {\r\n    cursor: 'grabbing'\r\n  }\r\n})\r\n\r\nconst scaleStep = [0.125, 0.17, 0.25, 0.33, 0.5, 0.67, 0.75, 0.8, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3, 4, 5]\r\n\r\ninterface BoardProps extends State, DispatchProps, WithStyles<typeof styles> {\r\n}\r\n\r\ninterface DispatchProps {\r\n  dispatchPutStone: (x: number, y: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: State): State => ({ ...state })\r\n\r\nconst mapDispatchToProps = (dispatch: React.Dispatch<Action<string>>): DispatchProps => ({\r\n  dispatchPutStone: (x, y) => dispatch(putStone(x, y))\r\n})\r\n\r\ninterface BoardState {\r\n  width: number\r\n  height: number\r\n  scrollX: number\r\n  scrollY: number\r\n  scale: number\r\n  isGrabbing: boolean\r\n}\r\n\r\nclass Board extends React.Component<BoardProps, BoardState> {\r\n  private readonly resizeObserver: ResizeObserver\r\n  private readonly boardContainerRef: React.RefObject<HTMLDivElement>\r\n  private readonly gRef: React.RefObject<SVGSVGElement>\r\n  private readonly svgRef: React.RefObject<SVGSVGElement>\r\n\r\n  private scaleIndex: number\r\n\r\n  private canTouch: boolean\r\n  private grabbingPointerId: number\r\n  private pointerDownX: number\r\n  private pointerDownY: number\r\n  private prevScrollX: number\r\n  private prevScrollY: number\r\n\r\n  constructor (props: Readonly<BoardProps>) {\r\n    super(props)\r\n\r\n    this.boardContainerRef = React.createRef()\r\n    this.gRef = React.createRef()\r\n    this.svgRef = React.createRef()\r\n    this.resizeObserver = new ResizeObserver(entries => {\r\n      this.resize(entries[0].contentRect.width, entries[0].contentRect.height)\r\n    })\r\n\r\n    this.scaleIndex = 9\r\n\r\n    this.canTouch = false\r\n    this.grabbingPointerId = 0\r\n    this.pointerDownX = 0\r\n    this.pointerDownY = 0\r\n    this.prevScrollX = 0\r\n    this.prevScrollY = 0\r\n\r\n    this.onWheelOnContainer = this.onWheelOnContainer.bind(this)\r\n    this.onClick = this.onClick.bind(this)\r\n    this.onTouchStartOnWindow = this.onTouchStartOnWindow.bind(this)\r\n    this.onTouchMoveOnWindow = this.onTouchMoveOnWindow.bind(this)\r\n    this.onPointerDownOnContainer = this.onPointerDownOnContainer.bind(this)\r\n    this.onPointerMoveOnWindow = this.onPointerMoveOnWindow.bind(this)\r\n    this.onPointerUpOrCancelOnWindow = this.onPointerUpOrCancelOnWindow.bind(this)\r\n\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      scrollX: 0,\r\n      scrollY: 0,\r\n      scale: 1,\r\n      isGrabbing: false\r\n    }\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    if (this.boardContainerRef.current !== null) {\r\n      this.resizeObserver.observe(this.boardContainerRef.current)\r\n    }\r\n\r\n    eventEmitter.on('SCALE_UP', this.scaleUp.bind(this))\r\n    eventEmitter.on('SCALE_DOWN', this.scaleDown.bind(this))\r\n  }\r\n\r\n  resize (width: number, height: number): void {\r\n    this.setState((prevState, props) => ({\r\n      width: width,\r\n      height: height,\r\n      scrollX: prevState.scrollX + (width - prevState.width) / 2,\r\n      scrollY: prevState.scrollY + (height - prevState.height) / 2\r\n    }), () => {\r\n      this.scrollTo(this.state.scrollX, this.state.scrollY)\r\n    })\r\n  }\r\n\r\n  scrollTo (x: number, y: number): void {\r\n    const minX = -(this.props.game.boundingRect.right + 1) * this.getActualCellSize()\r\n    const maxX = this.state.width + (-this.props.game.boundingRect.left + 1) * this.getActualCellSize()\r\n    const minY = -(this.props.game.boundingRect.bottom + 1) * this.getActualCellSize()\r\n    const maxY = this.state.height + (-this.props.game.boundingRect.top + 1) * this.getActualCellSize()\r\n    const hMargin = this.state.width * 0.1\r\n    const vMargin = this.state.height * 0.1\r\n    this.setState((prevState, props) => ({\r\n      scrollX: clamp(x, minX + hMargin, maxX - hMargin),\r\n      scrollY: clamp(y, minY + vMargin, maxY - vMargin)\r\n    }))\r\n  }\r\n\r\n  scaleUp (centerX?: number, centerY?: number): void {\r\n    this.scaleIndex = clamp(this.scaleIndex + 1, 0, scaleStep.length - 1)\r\n    this.setScale(scaleStep[this.scaleIndex], centerX ?? 0, centerY ?? 0)\r\n  }\r\n\r\n  scaleDown (centerX?: number, centerY?: number): void {\r\n    this.scaleIndex = clamp(this.scaleIndex - 1, 0, scaleStep.length - 1)\r\n    this.setScale(scaleStep[this.scaleIndex], centerX ?? 0, centerY ?? 0)\r\n  }\r\n\r\n  setScale (scale: number, centerX: number, centerY: number): void {\r\n    const x = centerX * scale / this.state.scale - (centerX - this.state.scrollX)\r\n    const y = centerY * scale / this.state.scale - (centerY - this.state.scrollY)\r\n    this.setState((prevState, props) => ({\r\n      scale: scale,\r\n      scrollX: x,\r\n      scrollY: y\r\n    }))\r\n  }\r\n\r\n  onClick (e: React.MouseEvent<SVGGElement>): void {\r\n    if (this.gRef.current !== null && this.svgRef.current !== null && this.props.board.tool === Tool.Stone) {\r\n      const p = screenToRelative(e.clientX, e.clientY, this.gRef.current, this.svgRef.current)\r\n      const cell = this.pixelToCellIndex(p.x, p.y)\r\n      this.props.dispatchPutStone(cell[0], cell[1])\r\n    }\r\n  }\r\n\r\n  onWheelOnContainer (e: React.WheelEvent<HTMLDivElement>): void {\r\n    const x = this.state.scrollX - e.clientX\r\n    const y = this.state.scrollY - e.clientY\r\n\r\n    if (e.deltaY < 0) this.scaleUp(x, y)\r\n    else this.scaleDown(x, y)\r\n  }\r\n\r\n  onTouchStartOnWindow (e: TouchEvent): void {\r\n    this.canTouch = true\r\n  }\r\n\r\n  onTouchMoveOnWindow (e: TouchEvent): void {\r\n    if (this.state.isGrabbing) {\r\n      if (e.touches.length === 1) {\r\n        const dx = e.touches[0].screenX - this.pointerDownX\r\n        const dy = e.touches[0].screenY - this.pointerDownY\r\n        this.scrollTo(this.prevScrollX + dx, this.prevScrollY + dy)\r\n      } else {\r\n        this.setState((prevState, props) => ({ isGrabbing: false }))\r\n      }\r\n    }\r\n  }\r\n\r\n  onPointerDownOnContainer (e: React.PointerEvent<HTMLDivElement>): void {\r\n    if (!this.state.isGrabbing && (this.props.board.tool === Tool.Pan || e.button === 1)) {\r\n      this.setState((prevState, props) => ({ isGrabbing: true }))\r\n      this.grabbingPointerId = e.pointerId\r\n      this.pointerDownX = e.screenX\r\n      this.pointerDownY = e.screenY\r\n      this.prevScrollX = this.state.scrollX\r\n      this.prevScrollY = this.state.scrollY\r\n    }\r\n  }\r\n\r\n  onPointerMoveOnWindow (e: PointerEvent): void {\r\n    if (this.canTouch) return\r\n\r\n    if (this.state.isGrabbing) {\r\n      const dx = e.screenX - this.pointerDownX\r\n      const dy = e.screenY - this.pointerDownY\r\n      this.scrollTo(this.prevScrollX + dx, this.prevScrollY + dy)\r\n    }\r\n  }\r\n\r\n  onPointerUpOrCancelOnWindow (e: PointerEvent): void {\r\n    this.setState((prevState, props) => ({ isGrabbing: false }))\r\n  }\r\n\r\n  render (): JSX.Element {\r\n    const { classes, board } = this.props\r\n\r\n    return (\r\n      <div ref={this.boardContainerRef}\r\n        className={classNames(classes.boardContainer, {\r\n          [classes.grabCursor]: board.tool === Tool.Pan && !this.state.isGrabbing,\r\n          [classes.grabbingCursor]: this.state.isGrabbing\r\n        })}\r\n        onPointerDown={this.onPointerDownOnContainer}\r\n        onWheel={this.onWheelOnContainer}>\r\n        <EventListener target=\"window\"\r\n          onTouchStart={this.onTouchStartOnWindow}\r\n          onTouchMove={this.onTouchMoveOnWindow}\r\n          onPointerMove={this.onPointerMoveOnWindow}\r\n          onPointerUp={this.onPointerUpOrCancelOnWindow}\r\n          onPointerLeave={this.onPointerUpOrCancelOnWindow}\r\n          onPointerCancel={this.onPointerUpOrCancelOnWindow}/>\r\n        <svg className={classes.board} xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={this.state.width} height={this.state.height} ref={this.svgRef}>\r\n          <SVGTranslator x={this.state.scrollX} y={this.state.scrollY}>\r\n            <g ref={this.gRef} onClick={this.onClick}>\r\n              {this.renderBackground()}\r\n              {this.renderBorders()}\r\n              {this.renderStones()}\r\n              {this.renderHints()}\r\n            </g>\r\n          </SVGTranslator>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  private pixelToCellIndex (x: number, y: number): [number, number] {\r\n    return [\r\n      Math.floor(x / this.getActualCellSize()),\r\n      Math.floor(y / this.getActualCellSize())\r\n    ]\r\n  }\r\n\r\n  private getActualCellSize (): number {\r\n    return Styles.board.cellSize * this.state.scale\r\n  }\r\n\r\n  private getActualHintSize (): number {\r\n    return Styles.board.hintSize * this.state.scale\r\n  }\r\n\r\n  private renderBackground (): JSX.Element {\r\n    const { game } = this.props\r\n\r\n    return <rect x={(game.boundingRect.left - 1) * this.getActualCellSize()}\r\n      y={(game.boundingRect.top - 1) * this.getActualCellSize()}\r\n      width={(game.boundingRect.right - game.boundingRect.left + 2) * this.getActualCellSize()}\r\n      height={(game.boundingRect.bottom - game.boundingRect.top + 2) * this.getActualCellSize()}\r\n      fill={Styles.board.backgoundColor} />\r\n  }\r\n\r\n  private renderBorders (): JSX.Element[] {\r\n    const { game } = this.props\r\n    const borders: JSX.Element[] = []\r\n    const x0 = (game.boundingRect.left - 1) * this.getActualCellSize()\r\n    const y0 = (game.boundingRect.top - 1) * this.getActualCellSize()\r\n    const w = (game.boundingRect.right - game.boundingRect.left + 2) * this.getActualCellSize()\r\n    const h = (game.boundingRect.bottom - game.boundingRect.top + 2) * this.getActualCellSize()\r\n\r\n    for (let i = 0; i <= (game.boundingRect.bottom - game.boundingRect.top + 2); i++) {\r\n      const y = i * this.getActualCellSize()\r\n      borders.push(<line key={`h${i}`} x1={x0} y1={y0 + y} x2={x0 + w} y2={y0 + y}\r\n        stroke={Styles.board.borderColor} strokeWidth={1} />)\r\n    }\r\n    for (let i = 0; i <= (game.boundingRect.right - game.boundingRect.left + 2); i++) {\r\n      const x = i * this.getActualCellSize()\r\n      borders.push(<line key={`v${i}`} x1={x0 + x} y1={y0} x2={x0 + x} y2={y0 + h}\r\n        stroke={Styles.board.borderColor} strokeWidth={1} />)\r\n    }\r\n\r\n    return borders\r\n  }\r\n\r\n  private renderStones (): JSX.Element[] {\r\n    const { game } = this.props\r\n\r\n    return game.cells.map(cell => {\r\n      return <Stone key={`${cell.x} ${cell.y}`}\r\n        cx={(cell.x + 0.5) * this.getActualCellSize()}\r\n        cy={(cell.y + 0.5) * this.getActualCellSize()}\r\n        r={Styles.board.stoneRadius * this.state.scale}\r\n        stone={cell.stone}\r\n        turnOver={cell.turnOver}/>\r\n    })\r\n  }\r\n\r\n  private renderHints (): JSX.Element[] {\r\n    const { game } = this.props\r\n\r\n    return game.markedCells.map((point, i) => {\r\n      return <rect key={i}\r\n        x={(point.x + 0.5) * this.getActualCellSize() - this.getActualHintSize() / 2}\r\n        y={(point.y + 0.5) * this.getActualCellSize() - this.getActualHintSize() / 2}\r\n        width={this.getActualHintSize()}\r\n        height={this.getActualHintSize()}\r\n        fill={Styles.board.hintColor} />\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(Board))\r\n","/**\r\n * Returns the position relative to {element}\r\n */\r\nexport function screenToRelative (x: number, y: number, element: SVGGraphicsElement, svg: SVGSVGElement): DOMPoint {\r\n  const p = svg.createSVGPoint()\r\n  p.x = x\r\n  p.y = y\r\n  return p.matrixTransform(element.getScreenCTM()?.inverse())\r\n}\r\n","import { Action } from 'redux'\r\n\r\nexport interface PointAction extends Action<string> {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport const stoneTool = (): Action<string> => ({\r\n  type: 'BOARD_TOOL_STONE'\r\n})\r\n\r\nexport const panTool = (): Action<string> => ({\r\n  type: 'BOARD_TOOL_PAN'\r\n})\r\n\r\nexport const resetGame = (): Action<string> => ({\r\n  type: 'GAME_RESET'\r\n})\r\n\r\nexport const putStone = (x: number, y: number): PointAction => ({\r\n  type: 'GAME_PUT_STONE',\r\n  x,\r\n  y\r\n})\r\n","import { Box, makeStyles, SvgIcon, Theme } from '@material-ui/core'\r\nimport PanToolOutlinedIcon from '@material-ui/icons/PanToolOutlined'\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab'\r\nimport * as React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { panTool, stoneTool } from 'redux/actions'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  container: {\r\n    transform: 'translateX(-50%)'\r\n  },\r\n  toggleButtonGroup: {\r\n    background: theme.palette.background.paper\r\n  }\r\n}))\r\n\r\nfunction BottomPane (): JSX.Element {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n\r\n  const [tool, setTool] = React.useState('stone')\r\n\r\n  const handleChange = (e: React.MouseEvent<HTMLElement>, newTool: string): void => {\r\n    if (newTool === null) return\r\n    switch (newTool) {\r\n      case 'stone':\r\n        dispatch(stoneTool())\r\n        break\r\n      case 'pan':\r\n        dispatch(panTool())\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    setTool(newTool)\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.container} position=\"fixed\" bottom={0} left=\"50%\" mb={2}>\r\n      <ToggleButtonGroup className={classes.toggleButtonGroup} size=\"large\" value={tool} exclusive onChange={handleChange}>\r\n        <ToggleButton value=\"stone\" aria-label=\"put stone\">\r\n          <SvgIcon fontSize=\"large\">\r\n            <path d=\"M 3 14 L 1 14 C 1 18.967 5.929 23 12 23 C 18.071 23 23 18.967 23 14 L 21 14 C 21 17.863 16.967 21 12 21 C 7.033 21 3 17.863 3 14 Z\" fillRule=\"evenodd\" />\r\n            <path d=\"M 1 10 C 1 5.033 5.929 1 12 1 C 18.071 1 23 5.033 23 10 L 23 10 L 23 14 L 21.855 14 C 20.054 16.962 16.315 19 12 19 C 7.685 19 3.946 16.962 2.145 14 L 1 14 L 1 10 Z  M 3 10 L 3 10 C 3 6.137 7.033 3 12 3 C 16.967 3 21 6.137 21 10 L 21 10 C 21 13.863 16.967 17 12 17 C 7.033 17 3 13.863 3 10 L 3 10 L 3 10 L 3 10 Z\" fillRule=\"evenodd\" />\r\n          </SvgIcon>\r\n        </ToggleButton>\r\n        <ToggleButton value=\"pan\" aria-label=\"pan\">\r\n          <PanToolOutlinedIcon fontSize=\"large\" />\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default BottomPane\r\n","import { Box, Card, List, ListItem, ListItemIcon, ListItemText, makeStyles, SvgIcon, Theme } from '@material-ui/core'\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight'\r\nimport classNames from 'classnames'\r\nimport Styles from 'components/styles'\r\nimport { Stone } from 'game'\r\nimport * as React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { State } from 'redux/reducers'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    display: 'flex'\r\n  },\r\n  arrowIconContainerSettled: {\r\n    display: 'none'\r\n  },\r\n  arrowIcon: {\r\n    transition: `all ${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeOut}`\r\n  },\r\n  arrowIconDown: {\r\n    marginTop: 'calc(1em + 16px)'\r\n  },\r\n  list: {\r\n    background: 'black'\r\n  },\r\n  listItemText: {\r\n    userSelect: 'none'\r\n  }\r\n}))\r\n\r\nfunction Scoreboard (): JSX.Element {\r\n  const classes = useStyles()\r\n  const turn = useSelector<State, Stone>(state => state.game.turn)\r\n  const whiteCount = useSelector<State, Stone>(state => state.game.whiteCount)\r\n  const blackCount = useSelector<State, Stone>(state => state.game.blackCount)\r\n\r\n  return (\r\n    <Box position=\"fixed\" top={0} right={0} mt={2} mr={2}>\r\n      <Card className={classes.card}>\r\n        <Box className={classNames({ [classes.arrowIconContainerSettled]: turn === Stone.Empty })} display=\"flex\" mt={2} mr={-2} mb={2} ml={0}>\r\n          <ArrowRightIcon color=\"action\"\r\n            className={classNames(classes.arrowIcon, { [classes.arrowIconDown]: turn === Stone.Black })} fontSize=\"large\" />\r\n        </Box>\r\n        <List>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <SvgIcon fontSize=\"large\">\r\n                <circle cx={12} cy={12} r={11} fill={Styles.board.whiteStoneColor}\r\n                  stroke={Styles.board.blackStoneColor} strokeWidth={0.5} />\r\n              </SvgIcon>\r\n            </ListItemIcon>\r\n            <ListItemText className={classes.listItemText} primary={whiteCount} />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <SvgIcon fontSize=\"large\">\r\n                <circle cx={12} cy={12} r={11} fill={Styles.board.blackStoneColor}\r\n                  stroke={Styles.board.blackStoneColor} strokeWidth={0.5} />\r\n              </SvgIcon>\r\n            </ListItemIcon>\r\n            <ListItemText className={classes.listItemText} primary={blackCount} />\r\n          </ListItem>\r\n        </List>\r\n      </Card>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Scoreboard\r\n","import { Box, Button, ButtonGroup, makeStyles, Theme } from '@material-ui/core'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport { eventEmitter } from 'eventEmitter'\r\nimport * as React from 'react'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  buttonGroup: {\r\n    background: theme.palette.background.paper\r\n  },\r\n  button: {\r\n    padding: 15,\r\n    color: theme.palette.text.secondary\r\n  }\r\n}))\r\n\r\nfunction ZoomPane (): JSX.Element {\r\n  const classes = useStyles()\r\n\r\n  const zoomIn = (): void => {\r\n    eventEmitter.emit('SCALE_UP')\r\n  }\r\n\r\n  const zoomOut = (): void => {\r\n    eventEmitter.emit('SCALE_DOWN')\r\n  }\r\n\r\n  return (\r\n    <Box position=\"fixed\" right={0} bottom={0} mr={2} mb={2}>\r\n      <ButtonGroup className={classes.buttonGroup} orientation=\"vertical\" size=\"large\">\r\n        <Button className={classes.button} onClick={zoomIn}>\r\n          <ZoomInIcon fontSize=\"large\" />\r\n        </Button>\r\n        <Button className={classes.button} onClick={zoomOut}>\r\n          <ZoomOutIcon fontSize=\"large\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ZoomPane\r\n","import Board from 'components/Board'\nimport BottomPane from 'components/BottomPane'\nimport Scoreboard from 'components/Scoreboard'\nimport ZoomPane from 'components/ZoomPane'\nimport React from 'react'\n\nfunction App (): JSX.Element {\n  return (\n    <React.Fragment>\n      <Board />\n      <Scoreboard />\n      <ZoomPane />\n      <BottomPane />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import { Action } from 'redux'\r\nimport { Tool } from 'redux/tool'\r\n\r\nconst initialState = {\r\n  tool: Tool.Stone\r\n}\r\n\r\ntype boardState = typeof initialState\r\n\r\nconst boardReducer = (state = initialState, action: Action<string>): boardState => {\r\n  switch (action.type) {\r\n    case 'BOARD_TOOL_STONE': {\r\n      state = {\r\n        ...state,\r\n        tool: Tool.Stone\r\n      }\r\n      return state\r\n    }\r\n    case 'BOARD_TOOL_PAN': {\r\n      state = {\r\n        ...state,\r\n        tool: Tool.Pan\r\n      }\r\n      return state\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default boardReducer\r\n","import { CellState, getBlackCount, getBoundingRect, getFilledCells, getMarkedCells, getTurn, getWhiteCount, Point, putStone, Rect, reset, Stone, TurnOver } from 'game'\r\nimport { Action } from 'redux'\r\nimport { PointAction } from 'redux/actions'\r\n\r\ninterface GameState {\r\n  turn: Stone\r\n  boundingRect: Rect\r\n  whiteCount: number\r\n  blackCount: number\r\n  cells: CellState[]\r\n  markedCells: Point[]\r\n}\r\n\r\nconst initialState: GameState = {\r\n  turn: Stone.White,\r\n  boundingRect: {\r\n    left: 0, top: 0, right: 0, bottom: 0\r\n  },\r\n  whiteCount: 0,\r\n  blackCount: 0,\r\n  cells: [],\r\n  markedCells: []\r\n}\r\n\r\nconst gameReducer = (state = initialState, action: Action<string>): GameState => {\r\n  switch (action.type) {\r\n    case 'GAME_RESET': {\r\n      reset()\r\n      return {\r\n        turn: getTurn(),\r\n        boundingRect: getBoundingRect(),\r\n        whiteCount: getWhiteCount(),\r\n        blackCount: getBlackCount(),\r\n        cells: getFilledCells(),\r\n        markedCells: getMarkedCells()\r\n      }\r\n    }\r\n    case 'GAME_PUT_STONE': {\r\n      const pointAction = action as PointAction\r\n      const updatedCells = putStone(pointAction.x, pointAction.y)\r\n      if (updatedCells === false) return state\r\n      const newCellsSet = new Set(updatedCells.map(cell => `${cell.x} ${cell.y}`))\r\n      return {\r\n        turn: getTurn(),\r\n        boundingRect: getBoundingRect(),\r\n        whiteCount: getWhiteCount(),\r\n        blackCount: getBlackCount(),\r\n        cells: [\r\n          ...updatedCells,\r\n          ...state.cells.filter(cell => !newCellsSet.has(`${cell.x} ${cell.y}`)).map(cell => {\r\n            // cell.isTurnedOver = false\r\n            // delete cell.turnOverStep\r\n            cell.turnOver = new TurnOver(false)\r\n            return cell\r\n          })\r\n        ],\r\n        markedCells: getMarkedCells()\r\n      }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default gameReducer\r\n","import { Action, combineReducers, StateFromReducersMapObject } from 'redux'\r\nimport boardReducer from 'redux/reducers/board'\r\nimport gameReducer from 'redux/reducers/game'\r\n\r\nconst allReducersMapObject = {\r\n  board: boardReducer,\r\n  game: gameReducer\r\n}\r\n\r\nexport type State = StateFromReducersMapObject<typeof allReducersMapObject>\r\n\r\nexport const allReducers = combineReducers<State, Action<string>>(allReducersMapObject)\r\n","/* eslint-disable no-irregular-whitespace */\r\n\r\nexport function hello (): void {\r\n  console.log('%c🐾ねこをすこれ🐾',\r\n    'font: bold 32px \"Roboto\", \"Helvetica\", \"Arial\", sans-serif; background: rgb(33,33,33); color: rgb(255,143,0)')\r\n  console.log(`%c        　 　 　　 ,-､　　　　　　　　　　　 　,.-､\r\n        　　　　 ./:::::＼　　　　　　　　　 ／::::::ヽ\r\n        　　　　/::::::::::::;ゝ--──-- ､._/::::::::::::::|\r\n        　　　 /,.-‐''\"´ 　　　　　　　　 ＼:::::::::::|\r\n        　　／　 　　　　　　　　　　　　　　ヽ､::::|\r\n        　/　　　　　　　　　　　　　　　　　　　ヽ|\r\n        　l　　　　　　　　　　　　 　 　 　 　 　 　 l\r\n        . |　　　 ●　　　　　　　　　　　　　　　　　|\r\n        　l　　, , ,　　　　　　　　　　　●　　　　 　l\r\n        　\\` ､　　　　　　(__人__丿　　　　､､､ 　 /\r\n        　　　\\`ｰ ､__　　　　　　　 　　 　　　 ／\r\n        　　　　　　　/\\`'''ｰ‐‐──‐‐‐┬'''\"\"´\r\n        　　　　　　 /,　　　　　　　　　　|\r\n        　　　　　 (_/　 　　　　 　 　|　　|\r\n        　　　 　　　 , 　　　　　　　 ヽ、_） 　　∩\r\n        　　　　　　　l　　　　 　 　 　　|＼　　ﾉ |\r\n        　.　　　 　　 |　　　 ヘ 　　 　 |｀ヽ二 ノ\r\n        　.　 　 　 　 |　　 /　 ＼　 　 /\r\n        　　　　　　　｀ｰ‐'　　　 ｀ー‐'`, 'font-family: \"ＭＳ Ｐゴシック\", \"MS PGothic\"; color: rgb(33,33,33)')\r\n  console.log('%cTwitter%chttps://twitter.com/kinsei0916',\r\n    'padding: 2px; background: rgb(29,161,242); color: rgb(255,255,255); border: 2px solid rgb(29,161,242)',\r\n    'padding: 2px; border: 2px solid rgb(29,161,242); before'\r\n  )\r\n}\r\n","import { createMuiTheme, ThemeProvider } from '@material-ui/core'\nimport { blue } from '@material-ui/core/colors'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from 'components/App'\nimport 'index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { resetGame } from 'redux/actions'\nimport { initialize } from 'redux/store'\nimport { hello } from 'utils/devtools'\n\nhello()\n\nconst store = initialize()\n\nstore.dispatch(resetGame())\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: blue\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { Action, CombinedState, createStore, Store, StoreEnhancer } from 'redux'\r\nimport { allReducers, State } from 'redux/reducers'\r\n\r\nlet store: Store<CombinedState<State>, Action<string>>\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION__: () => StoreEnhancer\r\n  }\r\n}\r\n\r\nexport function initialize (): Store<CombinedState<State>, Action<string>> {\r\n  store = createStore(\r\n    allReducers,\r\n    '__REDUX_DEVTOOLS_EXTENSION__' in window ? window.__REDUX_DEVTOOLS_EXTENSION__() : undefined\r\n  )\r\n  return store\r\n}\r\n"],"sourceRoot":""}